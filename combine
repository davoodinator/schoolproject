import java.util.Scanner;
import java.lang.String;
import java.util.Random;
import java.io.*;

public class butt {
	public static void main (String []args) {
		Scanner in = new Scanner(System.in);
		int menu = 0;
		do {
			displayMenu();
			boolean test = true;
			while (test) {
				if (in.hasNextInt()) {
					menu = in.nextInt();
					test = false;
				} else {
					System.out.println("Invalid input - Please retry");
					String Dummy = in.next();
				}
			}
		switch (menu) {
		case 1:
			playerAi();
			break;
		case 2:
			playerVersus();	
			break;
		case 3:
			displayRule();
			break;
		}
		
		} while (menu !=4);	
		System.out.println();
		System.out.println("Thanks for playing!");
	}
	public static void displayMenu() {
		System.out.printf("\n --------------------------------------------------");
		System.out.printf("\n Now playing: Rock, Paper, Scissors, Lizard, Spock!");
		System.out.printf("\n --------------------------------------------------");
		System.out.printf("\n");
		System.out.printf("\n Main Menu:");
		System.out.printf("\n 1. Play againts AI");
		System.out.printf("\n 2. Play with player");
		System.out.printf("\n 3. Show rules");
		System.out.printf("\n 4. Quit");
		System.out.printf("\n");
		System.out.printf("\n Made by Jeffrey Chen		              v7.0");
		System.out.printf("\n");
	}
	
	public static void displayRule() {
		Scanner scan = new Scanner(System.in);	
		final String QUIT = "m";
		String playerHand = "";
	
		System.out.println();
		System.out.println(" It's very simple...");
		System.out.println(" Scissors cuts paper, paper covers Rock,");
		System.out.println(" Rock crushes Lizard, Lizard poisions Spock,");
		System.out.println(" Spock smahes Scissors, Scissors decapitates, ");
		System.out.println(" Lizard, Lizard eats Paper, Paper disproves Spock, ");
		System.out.println(" Spock vaporizes Rock, and, as it always has,");
		System.out.println(" Rock crushes Scissors.");
		System.out.println();
		System.out.println(" \"m\" for menu");
		
		boolean inputValid = true;
		playerHand = scan.next();
		
		if (playerHand.equals(QUIT))
			{
				return;
			}
	}
	
	public static void results(String[] w){
        System.out.println("The results are:");
        for(int i = 0; i < w.length; i++){
            System.out.printf("Round %2d : %6s%n",i +1 , w[i]);
        }
    }
	
	public static String[] expand(String[] w ){
         String[] w1 = new String[10 + w.length];
         for(int i = 0; i < w.length; i++){
             w1[i] = w[i];
         }
         return w1;
    }

	public static void playerAi() {
		Scanner scan = new Scanner(System.in);		// The scanner allows user input
		Random rand = new Random();					// The random number generator allows computer to throw a random hand
		
		int game = 0;
		int round = 0;
		String continueGame = "as"; 
		
		// Initialize constants
		final String ROCK = "rock";
		final String PAPER = "paper";
		final String SCISSORS = "scissors";
		final String LIZARD = "lizard";
		final String SPOCK = "spock";
		final String QUIT = "m";
		final String LOSS_MSG = " You lost!";
		final String WIN_MSG = " You won!";
		final String TIE_MSG = " Tie!";

		String[] winningHand = new String[10];
		String computerHand = "";
		String playerHand = "";
		String roundResult = " You threw %s, computer threw %s\n";
		String scoreMsg = " Player Score: %d, Computer Score: %d\n\n";
		String winnerMsg = "";
		int playerScore = 0;
		int computerScore = 0;
		
		// This is the main game loop!
		while (true) 
		{
			if (round == 0 && !continueGame.equals("as")){ 
				if (continueGame.equals("Y")) { 
					winningHand = expand(winningHand);
				}
				else {
					break;
				}
			} 
			System.out.println();
			System.out.println(" Select input:");
			System.out.println(" \"rock\", \"paper\", \"scissors\", \"lizard\",\"spock\", or \"m\" for menu:  ");
			
			// Accept initial user input
			boolean inputValid = true;
			playerHand = scan.next();
			
			// Check validity of input
			if (  !(   playerHand.equals(ROCK) 
					|| playerHand.equals(PAPER) 
					|| playerHand.equals(SCISSORS) 
					|| playerHand.equals(LIZARD)
					|| playerHand.equals(SPOCK)
					|| playerHand.equals(QUIT)     ))
			{
				inputValid = false;
			}
			
			// If input is valid, get new user input
			while (!inputValid) {
				
				System.out.println(" Invalid input!! (Input \"rock\", \"paper\"," + 
								   "\"scissors\", \"lizard\", \"spock\", or \"m\")");

				playerHand = scan.next();
				
				// Check new input is valid
				if (       playerHand.equals(ROCK) 
						|| playerHand.equals(PAPER) 
						|| playerHand.equals(SCISSORS)
						|| playerHand.equals(LIZARD)
						|| playerHand.equals(SPOCK)
						|| playerHand.equals(QUIT)		)
				{
					inputValid = true;
				}
			}
				
			// If user typed "q" then quit the game
			if (playerHand.equals(QUIT))
			{
				return;
			}

			// Randomly generate computer's hand
			int tempHand = rand.nextInt(5);
			switch (tempHand) 
			{
			case 0:
				computerHand = ROCK;
				break;
			case 1:
				computerHand = PAPER;
				break;
			case 2:
				computerHand = SCISSORS;
				break;
			case 3:
				computerHand = LIZARD;
				break;
			case 4:
				computerHand = SPOCK;
				break;
			}
			
			// Check for tie
			if (playerHand.equals(computerHand))
			{
				winnerMsg = TIE_MSG;
			}
			
			
				// If not a tie, compute the winner
				switch (computerHand)
				{
				case ROCK:
					if (playerHand.equals(PAPER))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					break;
					
				case PAPER:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					break;
					
				case SCISSORS:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					break;
				case LIZARD:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					break;
				case SPOCK:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round+game*10]=playerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = LOSS_MSG;
						computerScore++;
						winningHand[round+game*10]=computerHand;
						round++;
					}
					break;
				}
		
			// Output the results of the round
			System.out.println(" ====================================");
			System.out.println();
			System.out.format(roundResult, playerHand, computerHand);
			System.out.println(winnerMsg);
			System.out.format(scoreMsg, playerScore, computerScore);
			System.out.println(" ====================================");
			if (round==10) {
				round=0;
				game++;
				System.out.print("Type in \"Y\" to continue.");
				System.out.println();
				continueGame = scan.next();
			}
		}
		results(winningHand);
	}
	
	public static void playerVersus() {
		
		Scanner scan = new Scanner(System.in);		// The scanner allows user input
		Random rand = new Random();
		
		int round = 0;
		String continueGame = "as"; 
		
		// Initialize constants
		final String ROCK = "rock";
		final String PAPER = "paper";
		final String SCISSORS = "scissors";
		final String LIZARD = "lizard";
		final String SPOCK = "spock";
		final String QUIT = "m";
		
		final String LOSS_MSG = " You lost!";
		final String WIN_MSG = " You won!";
		final String TIE_MSG = " Tie!";
		
		String[] winningHand = new String[10];
		String playertwoHand = "";
		String playerHand = "";
		String roundResult = " Player 1 threw %s, Player 2 threw %s\n";
		String scoreMsg = " Player 1's Score: %d, Player 2's Score: %d\n\n";
		String winnerMsg = "";
		int playerScore = 0;
		int playertwoScore = 0;
	
	while (true) 
		{
			if (round == 0 && !continueGame.equals("as")){ 
				if (continueGame.equals("Y")) { 
					winningHand = expand(winningHand);
				}
				else {
					break;
				}
			} 
			System.out.println();
			System.out.println(" Player 1 select input:");
			System.out.println(" \"rock\", \"paper\", \"scissors\", \"lizard\",\"spock\", or \"m\" for menu:  ");
			System.out.println();
			
			boolean inputValid = true;
			playerHand = scan.next();
			// Check validity of input
			if (  !(   playerHand.equals(ROCK) 
					|| playerHand.equals(PAPER) 
					|| playerHand.equals(SCISSORS) 
					|| playerHand.equals(LIZARD)
					|| playerHand.equals(SPOCK)
					|| playerHand.equals(QUIT)))
			{
				inputValid = false;
			}
			
			// If input is valid, get new user input
			while (!inputValid) {
				
				System.out.println(" Invalid input!! (Input \"rock\", \"paper\"," + 
								   "\"scissors\", \"lizard\", \"spock\" or \"m\")");

				playerHand = scan.next();
				
				// Check new input is valid
				if (       playerHand.equals(ROCK) 
						|| playerHand.equals(PAPER) 
						|| playerHand.equals(SCISSORS)
						|| playerHand.equals(LIZARD)
						|| playerHand.equals(SPOCK)
						|| playerHand.equals(QUIT))
				{
					inputValid = true;
				}
			}
				
			
			// If user typed "q" then quit the game
			if (playerHand.equals(QUIT))
			{
				return;
			}
			System.out.println();
			System.out.println(" Player 2 select input:");
			System.out.println(" \"rock\", \"paper\", \"scissors\", \"lizard\",\"spock\", or \"m\" for menu:  ");
			System.out.println();
			playertwoHand = scan.next();
			
			// Check validity of input
			if (  !(   playertwoHand.equals(ROCK) 
					|| playertwoHand.equals(PAPER) 
					|| playertwoHand.equals(SCISSORS) 
					|| playertwoHand.equals(LIZARD)
					|| playertwoHand.equals(SPOCK)
					|| playertwoHand.equals(QUIT)))
			{
				inputValid = false;
			}
			
			// If input is valid, get new user input
			while (!inputValid) {
				
				System.out.println(" Invalid input!! (Input \"rock\", \"paper\"," + 
								   "\"scissors\", \"lizard\", \"spock\" or \"m\")");

				playertwoHand = scan.next();
				
				// Check new input is valid
				if (       playertwoHand.equals(ROCK) 
						|| playertwoHand.equals(PAPER) 
						|| playertwoHand.equals(SCISSORS)
						|| playertwoHand.equals(LIZARD)
						|| playertwoHand.equals(SPOCK)
						|| playertwoHand.equals(QUIT))
				{
					inputValid = true;
				}
			}
				
			
			// If user typed "q" then quit the game
			if (playertwoHand.equals(QUIT))
			{
				return;
			}
			
			
			// Randomly generate computer's hand

			
			// Check for tie
			if (playerHand.equals(playertwoHand))
			{
				winnerMsg = TIE_MSG;
			}
			
			
				// If not a tie, compute the winner
				switch (playertwoHand)
				{
				case ROCK:
					if (playerHand.equals(PAPER))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					break;
					
				case PAPER:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					break;
					
				case SCISSORS:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					break;
				case LIZARD:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(SPOCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					break;
				case SPOCK:
					if (playerHand.equals(ROCK))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(PAPER))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					if (playerHand.equals(SCISSORS))
					{
						winnerMsg = WIN_MSG;
						playerScore++;
						winningHand[round]=playerHand;
						round++;
					}
					if (playerHand.equals(LIZARD))
					{
						winnerMsg = LOSS_MSG;
						playertwoScore++;
						winningHand[round]=playertwoHand;
						round++;
					}
					break;
				}
			
			// Output the results of the round
			System.out.println(" ========================================");
			System.out.println();
			System.out.format(roundResult, playerHand, playertwoHand);
			System.out.println(winnerMsg);
			System.out.format(scoreMsg, playerScore, playertwoScore);
			System.out.println(" ========================================");
			if (round==10) {
				System.out.print("Type in \"Y\" to continue.");
				System.out.println();
				continueGame = scan.next();
			}
		}
		results(winningHand);
	}
	
}
